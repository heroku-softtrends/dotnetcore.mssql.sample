{
<<<<<<< HEAD
  "name": "Dotnetcore.mssql.sample",
  "tagline": ".Net Core Sample app with Microsoft SQL database that can be deployed on Heroku using dotnetcore.postgress.buildpack",
  "body": "### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here [using GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/), select a template crafted by a designer, and publish. After your page is generated, you can check out the new `gh-pages` branch locally. If you’re using GitHub Desktop, simply sync your repository and you’ll see the new branch.\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n",
=======
  "name": "Heroku | Microsoft .NET Core Buildpacks",
  "tagline": "This repo is a very simple demonstration of running an ASP.NET Core web site on Heroku. This uses Visual Studio code and the ASP.NET Core Buildpack for Heroku and can be fully customized once deployed. ",
  "body": "### Welcome to .NET Core on Heroku.\r\nThis project is dedicated to running .NET Core and ASP.NET Core on Heroku using custom buildpacks. To begin, click the following Heroku Button to deploy a very basic ASP.NET Core app, built in Visual Studio, to Heroku. \r\n\r\n[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/herokumx/herokumxnet)\r\n\r\n### What is .NET Core? \r\nA re-imagined version of .NET that is suitable to be deployed alongside web apps and places a strong focus on a new set of assemblies and APIs based on the PCL 2.0 profile. This is a full open source project, with Microsoft taking contributions and developing in the open. This is owned and supported by Microsoft.\r\n\r\n### How is this different from Mono? \r\nThe version published under Mono is a snapshot of the .NET Framework source code. While Microsoft is publishing the source code, they are not actively developing Mono, nor are they taking patches. This is not supported by Microsoft. To read more about the differences, check out http://www.mono-project.com/docs/about-mono/dotnet-integration/\r\n",
>>>>>>> master
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}